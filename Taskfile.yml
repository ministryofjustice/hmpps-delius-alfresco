version: "3"

vars:
  ENV: "{{.ENV}}"
  NAMESPACE:
    sh: if [ "{{.ENV}}" = "poc" ]; then echo "hmpps-delius-alfrsco-{{.ENV}}"; else echo "hmpps-delius-alfresco-{{.ENV}}"; fi
  BUCKET_NAME:
    sh: kubectl get secret s3-bucket-output -n {{.NAMESPACE}} -o jsonpath='{.data.BUCKET_NAME}' | base64 --decode
  OPEN_SEARCH_PREFIX:
    sh: kubectl get svc --namespace {{.NAMESPACE}} | grep 'opensearch-proxy-service-cloud-platform' | awk '{ print $1 }'
  OPENSEARCH_HOST:
    sh: echo "{{.OPEN_SEARCH_PREFIX}}.{{.NAMESPACE}}.svc.cluster.local"
  ALLOWLIST:
    sh: yq 'join(",")' ./kustomize/{{.ENV}}/allowlist.yaml
  RDS_JDBC_URL:
    sh: kubectl get secrets rds-instance-output --namespace {{.NAMESPACE}} -o json | jq -r ".data | map_values(@base64d) | .RDS_JDBC_URL"
  DEBUG: "false"
  DEBUG_FLAG:
    sh: if [ "{{.DEBUG}}" = "true" ]; then echo "--debug"; else echo ""; fi
  HELM_POST_RENDERER_ARGS:
    sh: if [ "{{.DEBUG}}" = "true" ]; then echo "-d true"; else echo "-d false"; fi
  ATOMIC: "true"
  ATOMIC_FLAG:
    sh: if [ "{{.ATOMIC}}" = "true" ]; then echo "--atomic"; else echo ""; fi
  CHART_VERSION: "6.0.2"

tasks:
  helm_upgrade:
    cmds:
      - echo "NAMESPACE set to {{.NAMESPACE}}"
      - echo "BUCKET_NAME set to {{.BUCKET_NAME}}"
      - echo "OPEN_SEARCH_PREFIX set to {{.OPEN_SEARCH_PREFIX}}"
      - echo "OPENSEARCH_HOST set to {{.OPENSEARCH_HOST}}"
      - echo "RDS_JDBC_URL set to {{.RDS_JDBC_URL}}"
      - echo "DEBUG set to {{.DEBUG}}"
      - task: helm_repo_add
      - task: update_allowlist
      - task: helm_upgrade_install
        vars:
          NAMESPACE: "{{.NAMESPACE}}"
          BUCKET_NAME: "{{.BUCKET_NAME}}"
          OPENSEARCH_HOST: "{{.OPENSEARCH_HOST}}"
          RDS_JDBC_URL: "{{.RDS_JDBC_URL}}"
          DEBUG_FLAG: "{{.DEBUG_FLAG}}"
          ATOMIC_FLAG: "{{.ATOMIC_FLAG}}"
      - task: reset_allowlist
    silent: true

  prepare_namespace:
    internal: true
    cmds:
      - |
        export BUCKET_NAME=$(kubectl get secrets s3-bucket-output -o jsonpath='{.data.BUCKET_NAME}' | base64 -d)
        if [ "${ENV}" = "poc" ]; then
          export NAMESPACE=hmpps-delius-alfrsco-${ENV}
        else
          export NAMESPACE=hmpps-delius-alfresco-${ENV}
        fi
        export OPENSEARCH_PREFIX=$(kubectl get svc --namespace ${NAMESPACE} | grep 'opensearch-proxy-service-cloud-platform' | awk '{ print $1 }')
        export OPENSEARCH_HOST=${OPENSEARCH_PREFIX}.${NAMESPACE}.svc.cluster.local
        export RDS_JDBC_URL=$(kubectl get secrets rds-instance-output --namespace ${NAMESPACE} -o json | jq -r ".data | map_values(@base64d) | .RDS_JDBC_URL")
        export EXTRACTED=$(yq 'join(",")' ./kustomize/${ENV}/allowlist.yaml)
        echo "Using namespace: ${NAMESPACE}"

  update_allowlist:
    internal: true
    dir: ./kustomize/{{.ENV}}
    cmds:
      - |
        export ALLOWLIST={{.ALLOWLIST}}
        yq '.metadata.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = strenv(ALLOWLIST)' -i ./patch-ingress-repository.yaml
        yq '.metadata.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = strenv(ALLOWLIST)' -i ./patch-ingress-share.yaml

  helm_repo_add:
    internal: true
    cmds:
      - helm repo add alfresco https://kubernetes-charts.alfresco.com/stable --force-update

  helm_upgrade_install:
    internal: true
    dir: ./kustomize/{{.ENV}}
    cmds:
      - |
        helm upgrade --install alfresco-content-services alfresco/alfresco-content-services --version {{.CHART_VERSION}} --namespace {{.NAMESPACE}} \
        --values=../base/values.yaml --values=values.yaml \
        --set s3connector.config.bucketName={{.BUCKET_NAME}} \
        --set database.url={{.RDS_JDBC_URL}} \
        --set global.elasticsearch.host={{.OPENSEARCH_HOST}} \
        --set alfresco-search-enterprise.searchIndex.host={{.OPENSEARCH_HOST}} \
        --wait --timeout=60m \
        --post-renderer ../kustomizer.sh --post-renderer-args "{{.HELM_POST_RENDERER_ARGS}}" \
        {{.DEBUG_FLAG}} {{.ATOMIC_FLAG}}
        echo " "
        echo "***** Helm upgrade completed *****"
        echo "Helm revision: $(helm list -n {{.NAMESPACE}} | grep alfresco-content-services | awk '{print $10}')"
        echo "Chart version: $(helm list -n {{.NAMESPACE}} | grep alfresco-content-services | awk '{print $9}')"
        echo "ACS Version: $(helm list -n {{.NAMESPACE}} | grep alfresco-content-services | awk '{print $10}')"
        echo " "

  reset_allowlist:
    internal: true
    dir: ./kustomize/{{.ENV}}
    cmds:
      - yq '.metadata.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = "placeholder"' -i patch-ingress-repository.yaml
      - yq '.metadata.annotations."nginx.ingress.kubernetes.io/whitelist-source-range" = "placeholder"' -i patch-ingress-share.yaml
  
  simple_reindex:
    cmds:
      - | 
        helm install "reindex-default" ./jobs/reindex --set "global.elasticsearch.host={{.OPENSEARCH_HOST}}" --set "fromId=0" --set "toId=2000000" --namespace {{.NAMESPACE}}
        

  batch_reindex:
    vars:
      START: "{{.START | default 0}}"
      END: "{{.END | default 10050}}"
      CHUNK: "{{.CHUNK | default 1000}}"
      CONCURRENCY: "{{.CONCURRENCY | default 5}}"
      ARRAY:
        sh: |
          arr=$(
            for i in $(seq -f "%.0f" {{.START}} {{.CHUNK}} {{.END}}); do
              new_start=$i
              end=$((i + {{.CHUNK}} - 1))
              if [ $end -gt {{.END}} ]; then
                end={{.END}}
              fi
          cat << EOF
          ${new_start}-${end}
          EOF
            done
          )
          echo "$arr"
    cmds:
      - echo "Starting batch reindex from {{.START}} to {{.END}} in chunks of {{.CHUNK}}"
      - task: run_reindex_batches
        vars:
          OPENSEARCH_HOST: "{{.OPENSEARCH_HOST}}"
          NAMESPACE: "{{.NAMESPACE}}"
          ARRAY: "{{.ARRAY}}"
          CONCURRENCY: "{{.CONCURRENCY}}"
      - task: reindex_helm_cleanup
        vars:
          NAMESPACE: "{{.NAMESPACE}}"

  run_reindex_batches:
    cmds:
      - |
        pending="{{.ARRAY}}"
        # count the number of items
        total_items=$(echo "$pending" | wc -l)
        echo "Total items: $total_items"

        previous_completed=$(cat completed.txt) || true
        if [ -z "$previous_completed" ]; then
          echo "No previous completed items"
        else
          echo "Count of previous completed items: $(echo "$previous_completed" | wc -l)"
        fi

        # remove the completed items from the pending list
        for item in $previous_completed; do
          pending=$(echo "$pending" | grep -v "$item")
        done
        
        total_items=$(echo "$pending" | wc -l)
        echo "Total items: $total_items"


        started=()
        completed=()

        # while pending is not empty
        while [ -n "$pending" ]; do
            # echo "Pending: $pending"
            # Get the first item
            item=$(echo "$pending" | head -n 1)
            echo "Processing item: $item"

            # Get the start and end values
            start=$(echo "$item" | cut -d '-' -f 1)
            end=$(echo "$item" | cut -d '-' -f 2)
            echo "Start: $start, End: $end"

            # check the number of jobs running
            running_jobs=$(kubectl get jobs --namespace {{.NAMESPACE}} -l "reindex-job" -o json | jq '.items | length')
            echo "Running jobs: $running_jobs"
            if [ $running_jobs -ge {{.CONCURRENCY}} ]; then
                echo "No available slots, waiting for 5 seconds"
                sleep 5
            else 
              echo "Found at least 1 available slot!"
              echo "Available slots left: $(({{.CONCURRENCY}} - $running_jobs))"
              # run the job
              echo "helm install reindex-${start}-${end} ./jobs/reindex --set global.elasticsearch.host={{.OPENSEARCH_HOST}} --set fromId=${start} --set toId=${end} --namespace {{.NAMESPACE}}"  
              helm install "reindex-${start}-${end}" ./jobs/reindex --set "global.elasticsearch.host={{.OPENSEARCH_HOST}}" --set "fromId=${start}" --set "toId=${end}" --namespace {{.NAMESPACE}}
              # Remove the item from the list
              pending=$(echo "$pending" | tail -n +2)
            fi

            # check for completed jobs
            completed_jobs=$(kubectl get jobs --namespace {{.NAMESPACE}} -l "reindex-job" -o json | jq -r '.items[] | select(.status.succeeded == 1) | .metadata.labels["reindex-job"]')
            if [ -z "$completed_jobs" ]; then
              echo "No completed jobs"
            else
              echo "Completed jobs: $completed_jobs"
              echo "$completed_jobs" | while IFS= read -r job; do
                echo "Processing completed job: $job"
                completed+=("$job")
                echo "$job" >> completed.txt
                echo "Job $job completed"
                helm uninstall "reindex-$job" --namespace {{.NAMESPACE}}
              done
            fi
        done

  reindex_helm_cleanup:
    cmds:
      - |
        # wait for all jobs to complete
        kubectl wait --for=condition=complete jobs --namespace {{.NAMESPACE}} -l "reindex-job" --timeout=4h

        completed_jobs=$(kubectl get jobs --namespace {{.NAMESPACE}} -l "reindex-job" -o json | jq -r '.items[] | select(.status.succeeded == 1) | .metadata.labels["reindex-job"]')
        if [ -z "$completed_jobs" ]; then
          echo "No completed jobs"
        else
          echo "Completed jobs: $completed_jobs"
          echo "$completed_jobs" | while IFS= read -r job; do
            echo "Processing completed job: $job"
            completed+=("$job")
            echo "$job" >> completed.txt
            echo "Job $job completed"
            helm uninstall "reindex-$job" --namespace {{.NAMESPACE}}
          done
        fi

  helm_bulk_uninstall:
    vars:
      PREFIX: "{{.PREFIX}}"
    cmds:
      - |
        helm list -n {{.NAMESPACE}} -q | grep "^{{.PREFIX}}" | while IFS= read -r release; do
          echo "Uninstalling release: $release"
          helm uninstall "$release" -n "$NAMESPACE"
        done
        